/* ****************************************************************************
 * Webook.js
 * Webook is prononced Web Book, the concept is simple, create Web Content,
 * for ePub or eBooks, PDF files, which can be used to create printed Books,
 * as such, as a Qt Felgo Application, Webook is a concept of creating Content,
 * that can be used in an App, and exported to various formats,
 * for example: I have a Website, it has content, I have books, as in many of them,
 * and like most Authors, I want a way to manage all of them, plue my Website,
 * we Computer Programmers and Authors, have different needs, and mine are not met,
 * by current Content Managment Systems, AKA CMS, I have written a few in my time,
 * and this effort may prove no differnt then those, that Technology has passed by,
 * Laguagues change all the time, and that will not change any time soon,
 * but this is a LocalStorage Database Driven Application, that is designed to run,
 * on all Platforms that Qt and Felgo Support, so most of them,
 * including: Linux, currently I am on Ubuntu Mate with Cinnomon on top,
 * but it will run on any Linux distro, as well as Mac, or Windows,
 * and with Felgo it will run on Android and IoS.
 *
 * The Webook Qml File will access Functions in this file,
 * I have to finish the WebPageMaker.js file before this one, since its based on this one,
 * so it is a Cat and Mouse game, what did the Cat do before Mice were invented,
 * an Aspie joke, I must first write the WebPage Framework, that this file will parse,
 * from database entries, such as must data, you must know what type of data it is,
 * for this App, I decided to base every website in the World that will ever be created,
 * from this time forth, to be based on a Book, and the reason is simple,
 * Web Book, it is not a play on words, if I want to make an ePub or eBook,
 * difference being that ePub is a Standard, I will support 1, 2 and 3,
 * and 4 when it comes out, or maybe a beta 4 format that works with audio and video,
 * so as to not confuse the App, that is just a WebPage Maker,
 * it is designed to work with an online Web Server, since this App is an Android/IoS App,
 * it has limitations built in, for example, I can only use a URL for the WebView Control,
 * so I have to upload it to a live web server, in order to display the files in WebView,
 * and this is built into Android and IoS as a secruity feature, it only uses the native web browser,
 * and it can not access local files period end of subject, trust me on this, until it changes,
 * this App can not change, it has the same limitations of the device it runs on.
 *
 * Think of each line in the database being a line that effects this Content,
 * and since the goal is to make ePub or eBook, PDF files in a few different formats,
 * one for Amazon, one for Lulu, and one for the Web, that makes 3, so how do I do this with Webook?
 *
 * Let me give you a good working example, say I want to write a book about selling books,
 * but my website is about the subject I am writing about, so I can not use it for this reason,
 * but I want to link to it, and as an Author I have many books, and want to write more,
 * but I want to maintain them all in one place, in comes Webook, it is designed for Authors,
 * who may not be Computer Programmers, so I most make it a program they can use,
 * so it is targeted at Authors, or anyone that writes content, that is book oriented,
 * for example, my website the Light Wizzard dot com, is about the Science Sir Isaac Newton,
 * and Benjamn Franklin and Nikola Tesla, but few know anything about Newton,
 * and to complicate things, I based my website on my my First Cousin Five times removed,
 * Isaac Newton and his Son is Benjamin Franklin Flesher, who were born in Weston West Virgina,
 * witch was named after their Grandfather, my Great-Great-Grandfather, maybe a few more Greates,
 * 6 generations ago, when we first moved to North America, back in the 16 and 17 hundreds,
 * making my family Native Americans, so my website is not the same as my books,
 * but based on the Concept of a New Science, called Trinary Science, and like your Website,
 * I have to brand my Website based on its content, so to make it simple,
 * I needed a way to separate it, and that is what all Authors need to do, and most website as well.
 * I write a book about writting a website, that is about writting the book,
 * so I name the website "Website", just to make it unique, no one would think about being this obvious,
 * and I write books I call Book 1, Book 2 and my latest Book 3, but they are not sequales,
 * this is keeping it separated, do not get caught up in your own story, leave that for the book,
 * I just love to throw stuff out there because of my OCD, but this is not about that,
 * it is about Webook, and that was the way I deal with my OCD, I break it down into parts,
 * WebPageMaker.js will build the WebPages, Webook.js will bridge the gap,
 * it uses Database.js to do all the Database Functions, keep it separated, so as an Author,
 * I do not really care about how it gets done, but as a Computer Programmer I do,
 * as such, the Author wants to write about their story, and the Programmer wants to talk about his,
 * but who ever is reading this, just wants to know how to use it,
 * and my example is think about the book, first, website second, and programer last.
 *
 * The Author wants to use the Webook Page to Add a Book, the top most book you promote,
 * is called your Best Seller, but your Book may be a store that sells books,
 * or a Social Media Website, no two books are alike, so keep it simple,
 * I can name the book, give it an ISBN number, which makes sense for a book, but not Social Media,
 * so I need to define a Template for my Template, so telling a Story or writting a book,
 * it all comes down to the words we use to describe things, and that is what a template is used for.
 *
 * I want my screen to have a Dropdown, and from it, I need to have a list of templates,
 * this should be set in a configuration file, XML or JSON, plain text, or other standard format,
 * but I chose to go Database driven, so there will be a screen just for this purpose,
 * so I can add, edit or delete templates, for example, if I want to write a book about my family,
 * I want to have a list of templates I could use to make a Family Tree, maybe there is an App,
 * maybe I need to write it, this is how you use this template, you decide what you want it to do,
 * then you make it do it, so I want to make a list of Templates for each book I want,
 * then when I add a book, I can chose a Template for it, now instead of it saying ISBN,
 * maybe it will say part number, it can say what you tell it to, it is called Programming,
 * and this is how it is done, I must duplicate the screen I want to use as a Template,
 * then change the wording on it, and the file name, title and so on, of course,
 * now I can write templates for Chapters, so the default template is for a Book,
 * you might want to keep it, even if you do not use it, as long as it is not used,
 * you can remove it from the pro file, and not compile it in, this way the file is there,
 * but not used by the project, so you can use it to duplicate more files as templates,
 * or just copy the content of the file from the repo, or from another file of the same base,
 * as such, you can create templates for all the subchapters as well,
 * and Paragraphs is where it gets complex, think of a Book as having details that any book would have,
 * and any think can be a book, a book is just a concept of what the Website is about,
 * if it was written as a book, how would you define it, and the truth is,
 * that a Book is a vast subject, and so in terms of Information, it is Generic,
 * and ISBN or part number mean the same thing even if you do not rename them, so all you need to change,
 * is the words, so do not put a lot of JavaScript in them, just short function calls,
 * the reason is clear, if you want to write complex programs, you need to separate the code,
 * you might not want to mess with any files in this project, instead, just include them,
 * and write your own templates that replace mine, for your needs, thus you name them something else,
 * as such, the book has its details, the chaper is just about that chapter, and subchapers,
 * are about Levels, as in PDF Table of Content, if I want a list of things,
 * for example, like a book, chapter 1, subchapter 1, gives me 1:1, and the down arrow in a tree,
 * but paragraphs is where the Text is, and that might contain links, and those differ,
 * based on what format this content is in, for example, a website can be relative based,
 * whereas in XHTML, all links are internal or relative, must be of a specific type,
 * for example html, xhtml, but any extention that requires the web browser to need to know the type,
 * it must be defined, so there needs to be a dynamic way to create this link, so I use values,
 * such as the DocType, Browser Type, and output type, for example pdf for all 3 formates,
 * whereas 2 of the 3 formats will not validate, only one needs to, the other only need to self validate,
 * meaning they need to validate on those services, so if I create a pdf file for Lulu,
 * it needs to validate on Lulu, same for Amazon, but this project is built in steps,
 * frist build the WebPage Function Library, then the Database, then this file,
 * so I have two Libraries to finish before I can start work on this one, and at the same time,
 * you will need to know what it is going to be about, or is about.
 *
 * The Paragraph has a markup language based on ${function,parm1,parm2} syntac,
 * for example: I write a lot of books, so I need a function that will print all my books,
 * so I need a way to enter all my books, and then make a database call that list them,
 * so when I write a paragraph, I might say I write the following books:
 * ${querylistbooks,"author=" + "AuthorName"} and that is what it looks like in the editor,
 * but when you create the WebPage, it replaces this Markup, with the query,
 * actually syntac might change, this is just an example, but all calls are made the same,
 * so for example I want to use a Math Function from the Math Library,
 * just like I need a function to tie this too:
 * ${querylistbooks,"author=" + "AuthorName"}
 * in the code I will have something that parses this file, and looks for a match,
 * for example:
 *  if (token.name === "querylistbooks") {
 *     return Db.bookquery(token.parm(1));
 *  }
 *
 * This means I need a parser, and makes prototypes for tokens, then I need logic to run the functions,
 * that is what will be included in this file, is the logic required, to parse the Paragraph field,
 * return a tolken, with methods for token.length, so I can loop over it, so web programmers,
 * need to understand that Qml JavaScript gets converted to C++, so it acts like C++,
 * so treat it as such, if you plan to run this on a different Engine, you need to understand this,
 * reason is simple, loops in JavaScript are better a specific way,
 * and that way is not the same as Qml, for example, in the Web I would use a property iterator,
 * but in C++, I can use Index pointers, so I tend to loop using arrays, as such,
 * this is standard practice in Qml, but a bad practice in Web Engines,
 * due to a problems with loop preformance in Arrays, not specifically a string array,
 * which is what I like to use, but the fact I have no DOM to work with,
 * a fact most Web programs say what, but Qml is not a Web App, it is a real App,
 * no DOM code will work the way you think it will, so I do not use any,
 * nor can I use a Library that requires them, since this will work for web, but not for an App,
 * as such, this Library was actually only written for Qt Qml and Felgo specifically,
 * and I have no concept of how it will run as a Web Server client side App,
 * this code was written to be compiled, a book can have thousands of paragraphs in it,
 * and each more complex then the next, and the API has to handle it, so for every function,
 * there is a name key to go with it, ${keyName,parm1,parm2}, so the tokens are split,
 * into a keyName function call, using an array of parms, i.e. token.parm(1), token.parm(2)...
 *
 *
 * I write using Qt Creator, I do not see a spell checker in it,
 * so I need to remember to run it manually, which means cut and paste,
 * so eventually I will fix a lot of Spelling and Dyslexic errors,
 * and maybe even Grammar Errors.
 */
function func() {

}
